plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs'
    id 'maven-publish'
}


android {
    compileSdk 33

    defaultConfig {
        minSdk 24           // Changed from 21 -> 24 because of Flexlayout
        targetSdk 33
        versionCode 2
        versionName "1.3.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    viewBinding {
        enabled = true
    }


    buildFeatures {
        buildConfig = true
    }

}

/**
 * TODO Transfer logic to automation.gradle and import/apply from
 */
//tasks.register('hello') {
//    doLast {
////        assembleRelease
////        task("assembleRelease")
//    }
//    println 'Hello world!'
//
//}


task fooExec(type: Exec) {
    workingDir "${buildDir}"
    commandLine 'echo', 'hello'
    doLast {
        println "Executed!"
    }
}

task libReleasePub (type: GradleBuild) {
    /**
     * This task first calls assemble release to create the release variant
     * Source -> https://stackoverflow.com/questions/32907275/gradle-custom-task-which-runs-multiple-tasks
     */
    tasks = ['assembleRelease','publishReleasePublicationToGithubPackagesRepository']

    /**
     * TODO
     * 1. Check that an sdk release.aar actually exists before publication online
     * 2. Find a why to switch from a demo/dev URL uri("https://maven.pkg.github.com/pesapalsnm/pesapalgatewayLib") to prod uri"/pesapalgatewayLibraryProd"
     * 3. With URL switch it should also switch the credentials. The separate URL should also have separate passwords as they will shared with merchants
     * 4. Catch error such as "   > Could not PUT 'https://maven.pkg.github.com/pesapalsnm/pesapalgatewayLib/com/pesapal/sdk/pesapal_sdk/1.1.6/pesapal_sdk-1.1.6.aar'. Received status code 409 from server: Conflict"
     * 5. If error above can be caught try and bump version automatically
     *
     */

    /**
     * todo Testing
     * For local aar usage publishDebugPublicationToMavenLocal or publishReleasePublicationToMavenLocal
     * Import it to gradle eg for Windows  implementation files('C:\\Users\\"YOUR USERNAME"\\.m2\\repository\\com\\pesapal\\sdk\\pesapal_sdk\\2.0.01\\pesapal_sdk-2.0.01.aar')
     */
}

//def githubProperties = new Properties()
//githubProperties.load(new FileInputStream(rootProject.file("github.properties"))) //Set env variable GPR_USER & GPR_API_KEY if not adding a properties file


def LIB_GROUP_ID = 'com.pesapal.sdk'
def LIB_ARTIFACT_ID = 'pesapal_sdk'          // DEV
//def LIB_ARTIFACT_ID = 'payment_gateway'           // For PRODUCTION Public use
def LIB_VERSION = '2.1.011'

//todo Remember Debug has interceptor on. All public versions should be release variants

/**
 * todo
 * 1. Automate so that LIB_ARTIFACT_ID and URL match DEV vs PRODUCTION
 *
 * 2. Setting a namespace for resources -> https://developer.android.com/build/publish-library/prep-lib-release#groovy (non-essential ATM)
 */

publishing {
    repositories {
        maven {
            name = "GithubPackages"
            url = uri("https://maven.pkg.github.com/pesapalsnm/pesapalgatewayLib")              // For developers
//            url = uri("https://maven.pkg.github.com/pesapalsnm/androidPaymentGatewaySDK")         // For PRODUCTION Public use
            credentials {
                username = 'a'
                password = 'b'

            }
        }

    }

    /**
     * https://github.com/enefce/AndroidLibraryForGitHubPackagesDemo
     * https://stackoverflow.com/questions/55864101/no-longer-able-to-use-bundlereleaseaar-in-mavenpublication -> Artifact aar name
     */

    //Attempting to use MavenLocal()
    publications {
        release(MavenPublication) {
            groupId LIB_GROUP_ID
            artifactId LIB_ARTIFACT_ID
            version LIB_VERSION
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
        debug(MavenPublication) {
            groupId LIB_GROUP_ID
            artifactId LIB_ARTIFACT_ID
            version LIB_VERSION
            artifact("$buildDir/outputs/aar/${project.getName()}-debug.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)s
                }
            }
        }

    }
}






dependencies {
    def nav_version = "2.5.1"
    api 'androidx.core:core-ktx:1.8.0'
    api 'androidx.appcompat:appcompat:1.5.0'
    api 'com.google.android.material:material:1.11.0'
    api 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    api "androidx.navigation:navigation-fragment-ktx:$nav_version"
    api "androidx.navigation:navigation-ui-ktx:$nav_version"


    // Mask
    api 'com.github.santalu:mask-edittext:1.1.1'

    //county picker
    api 'com.hbb20:ccp:2.6.1'

    // Spin kit
    api 'com.github.ybq:Android-SpinKit:1.2.0'

    /* Retrofit & OkHttp  */
    api 'com.squareup.retrofit2:retrofit:2.9.0'
    api 'com.squareup.retrofit2:converter-gson:2.9.0'
    api 'com.squareup.retrofit2:adapter-rxjava2:2.6.2'
    api 'com.squareup.okhttp3:logging-interceptor:4.10.0'

    /* view model */
    api "android.arch.lifecycle:viewmodel:1.1.1"
    api 'com.agrawalsuneet.androidlibs:dotsloader:1.4'

//    api 'org.jfrog.cardinalcommerce.gradle:cardinalmobilesdk:2.2.6-1'


    // sec
    api("androidx.security:security-crypto:1.1.0-alpha06")

    // Koin
    def koin_version = '2.2.0-alpha-1'
    api "org.koin:koin-androidx-scope:$koin_version"
    api "org.koin:koin-androidx-viewmodel:$koin_version"
//    api "org.koin:koin-androidx-fragment:$koin_version"
//    api "org.koin:koin-android:$koin_version"

    api 'com.google.android.flexbox:flexbox:3.0.0'


}





